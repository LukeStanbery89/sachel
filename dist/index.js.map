{"mappings":"sEA2BAA,EAAiB,C,sBAzBjB,SAA+BC,GAE3B,IACI,MAAMC,EAAoBC,EAAAC,aAAgBH,GAC1C,OAAOI,KAAKC,MAAMJ,E,CACpB,MAAOK,GAKL,OAJAC,QAAQC,MAAM,2BAA4BF,GACrCJ,EAAAO,WAAcT,IACfE,EAAAQ,UAAaV,GAEV,E,kBAIf,SAAwBA,EAAeC,GAEnC,IAEI,OADAC,EAAAS,cAAiBX,EAAeI,KAAKQ,UAAUX,KACxC,C,CACT,MAAOK,GAEL,OADAC,QAAQC,MAAM,8BAA+BF,EAAGN,EAAeC,SAA0BA,IAClF,C,KCtBTY,sB,EAAAd,EAAAe,eCSN,SAASC,IACL,OAAOC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAAMC,U,QASnDC,EAAiB,C,mBApBjB,SAA4BC,GACxB,OAAOP,KAAyBO,EAAYC,O,oBAGhD,SAA2BtB,EAAmBuB,GAG1C,cAFOvB,EAAkBuB,GAElBvB,C,sBAgBPc,E,wBATJ,SAAiCU,EAAkBC,GAG/C,OAFUC,OAAOF,GACPE,OAAOD,IACFN,U,IDfbQ,mB,EAAAP,EAAAQ,kB,EAAAR,EAAAS,oB,EAAAT,EAAAU,wBAEN,MAAMC,EAAkBC,EAAAC,KAAUC,EAAAC,MAAe,mBAC3CC,EAAkBJ,EAAAC,KAAUF,EAAiB,eAmCnD,SAASM,EAAOd,GACZ,IAAIvB,EAAoBsC,EAAsBF,GAE9C,OADApC,EAAoBuC,EAAkBvC,EAAmBuB,GAClDiB,EAAeJ,EAAiBpC,E,CAmC3CyC,OAAAC,QAAiB,C,IArEjB,WACI,OAAOJ,EAAsBF,E,QAGjC,SAAeb,EAASoB,GACpB,IAAI3C,EAAoBsC,EAAsBF,GAM9C,OALApC,EAAkBuB,GAAW,CACzBD,QAASsB,EAAwBC,IATfC,K,KAUlBH,GAGGH,EAAeJ,EAAiBpC,E,OAG3C,SAAcuB,GACV,IACI,IAAIvB,EAAoBsC,EAAsBF,GAC9C,OAAIpC,EAAkBuB,GACdwB,EAAmB/C,EAAkBuB,SACrCc,EAAOd,GAGJvB,EAAkBuB,GAASoB,UAEtC,C,CACF,MAAOtC,GAEL,YADAC,QAAQC,MAAM,iBAAkBF,E,UA+CpCgC,E,QApCJ,SAAiBd,GACb,IAAIvB,EAAoBsC,EAAsBF,GAC9C,QAAIpC,EAAkBuB,KAClBvB,EAAkBuB,GAASD,QAAUsB,EAAwBC,IA1C3CC,KA2CXN,EAAeJ,EAAiBpC,G,aAK/C,SAAoBuB,GAChB,IAAIvB,EAAoBsC,EAAsBF,GAC9C,QAAIpC,EAAkBuB,KAClBvB,EAAkBuB,GAASD,QAAUuB,IAC9BL,EAAeJ,EAAiBpC,G,YAK/C,SAAmBuB,GAEf,OADwBe,EAAsBF,GACrBb,IAAUD,cAAW0B,C,YAGlD,SAAmBzB,EAAS0B,GACxB,IAAIjD,EAAoBsC,EAAsBF,GAC9C,QAAIpC,EAAkBuB,KAClBvB,EAAkBuB,GAASD,QAAU2B,EAC9BT,EAAeJ,EAAiBpC,G","sources":["src/file-utils.js","src/index.js","src/cache-utils.js"],"sourcesContent":["const fs = require('fs');\n\nfunction readCacheFileContents(cacheFilePath) {\n    // console.log('!!! READ FROM CACHE FILE !!!');\n    try {\n        const cacheFileContents = fs.readFileSync(cacheFilePath);\n        return JSON.parse(cacheFileContents);\n    } catch (e) {\n        console.error('[GET_CACHE_FILE] error: ', e);\n        if (!fs.existsSync(cacheFilePath)) {\n            fs.mkdirSync(cacheFilePath);\n        }\n        return {};\n    }\n}\n\nfunction writeCacheToFS(cacheFilePath, cacheFileContents) {\n    // console.log('cacheFileContents: ', cacheFileContents);\n    try {\n        fs.writeFileSync(cacheFilePath, JSON.stringify(cacheFileContents));\n        return true;\n    } catch (e) {\n        console.error('[WRITE_CACHE_TO_FS] error: ', e, cacheFilePath, cacheFileContents, typeof cacheFileContents);\n        return false;\n    }\n}\n\nmodule.exports = {\n    readCacheFileContents,\n    writeCacheToFS,\n};","const path = require('path');\nconst { readCacheFileContents, writeCacheToFS } = require('./file-utils');\nconst { cacheRecordIsStale, removeCacheRecord, getCurrentTimeStamp, generateExpiryTimestamp } = require('./cache-utils');\n\nconst CACHE_DIRECTORY = path.join(process.cwd(), '/.satchel-cache');\nconst CACHE_FILE_PATH = path.join(CACHE_DIRECTORY, '/cache.json');\nconst CACHE_LIFESPAN_MINUTES = 15;\nconst CACHE_LIFESPAN_MS = CACHE_LIFESPAN_MINUTES * 60 * 1000;\n\nfunction all() {\n    return readCacheFileContents(CACHE_FILE_PATH);\n}\n\nfunction write(cacheID, data) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    cacheFileContents[cacheID] = {\n        expires: generateExpiryTimestamp(getCurrentTimeStamp(), CACHE_LIFESPAN_MS),\n        data\n    };\n    // console.log('[WRITE] cacheFileContents: ', cacheFileContents);\n    return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n}\n\nfunction read(cacheID) {\n    try {\n        let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n        if (cacheFileContents[cacheID]) {\n            if (cacheRecordIsStale(cacheFileContents[cacheID])) {\n                remove(cacheID);\n                return undefined;\n            }\n            return cacheFileContents[cacheID].data;\n        }\n        return undefined;\n    } catch (e) {\n        console.error('[READ] error: ', e);\n        return undefined;\n    }\n}\n\nfunction remove(cacheID) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    cacheFileContents = removeCacheRecord(cacheFileContents, cacheID);\n    return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n}\n\nfunction hydrate(cacheID) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    if (cacheFileContents[cacheID]) {\n        cacheFileContents[cacheID].expires = generateExpiryTimestamp(getCurrentTimeStamp(), CACHE_LIFESPAN_MS);\n        return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n    }\n    return false;\n}\n\nfunction invalidate(cacheID) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    if (cacheFileContents[cacheID]) {\n        cacheFileContents[cacheID].expires = getCurrentTimeStamp();\n        return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n    }\n    return false;\n}\n\nfunction getExpiry(cacheID) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    return cacheFileContents[cacheID]?.expires || undefined;\n}\n\nfunction setExpiry(cacheID, timestamp) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    if (cacheFileContents[cacheID]) {\n        cacheFileContents[cacheID].expires = timestamp;\n        return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n    }\n    return false;\n}\n\nmodule.exports = {\n    all,\n    write,\n    read,\n    remove,\n    hydrate,\n    invalidate,\n    getExpiry,\n    setExpiry,\n};","function cacheRecordIsStale(cacheRecord) {\n    return getCurrentTimeStamp() >= cacheRecord.expires;\n}\n\nfunction removeCacheRecord(cacheFileContents, cacheID) {\n    delete cacheFileContents[cacheID];\n    // console.log('[REMOVE] cacheFileContents: ', cacheFileContents);\n    return cacheFileContents;\n}\n\nfunction getCurrentTimeStamp() {\n    return Math.floor(new Date().getTime() / 1000).toString();\n}\n\nfunction generateExpiryTimestamp(currentTimestamp, cacheLifespan) {\n    const t = BigInt(currentTimestamp);\n    const l = BigInt(cacheLifespan);\n    return (t + l).toString();\n}\n\nmodule.exports = {\n    cacheRecordIsStale,\n    removeCacheRecord,\n    getCurrentTimeStamp,\n    generateExpiryTimestamp,\n};"],"names":["$9a3c0a0aacdbb541$exports","cacheFilePath","cacheFileContents","$6YMy9$fs","readFileSync","JSON","parse","e","console","error","existsSync","mkdirSync","writeFileSync","stringify","readCacheFileContents","writeCacheToFS","$f88b8f9a492c3c7f$var$getCurrentTimeStamp","Math","floor","Date","getTime","toString","$f88b8f9a492c3c7f$exports","cacheRecord","expires","cacheID","currentTimestamp","cacheLifespan","BigInt","cacheRecordIsStale","removeCacheRecord","getCurrentTimeStamp","generateExpiryTimestamp","$6dbc217b010a975b$var$CACHE_DIRECTORY","$6YMy9$path","join","$6YMy9$process","cwd","$6dbc217b010a975b$var$CACHE_FILE_PATH","$6dbc217b010a975b$var$remove","$6dbc217b010a975b$require$readCacheFileContents","$6dbc217b010a975b$require$removeCacheRecord","$6dbc217b010a975b$require$writeCacheToFS","module","exports","data","$6dbc217b010a975b$require$generateExpiryTimestamp","$6dbc217b010a975b$require$getCurrentTimeStamp","$6dbc217b010a975b$var$CACHE_LIFESPAN_MINUTES","$6dbc217b010a975b$require$cacheRecordIsStale","undefined","timestamp"],"version":3,"file":"index.js.map"}