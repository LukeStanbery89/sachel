{"mappings":"sEAkCAA,EAAiB,C,sBA7BjB,SAA+BC,GAC3B,IACI,MAAMC,EAAoBC,EAAAC,aAAgBH,GAC1C,YAA0BI,IAAtBH,EACO,GAEJI,KAAKC,MAAML,E,CACpB,MAAOM,GACL,MAAMC,EAAeC,EAAAC,QAAaV,GAOlC,OANKE,EAAAS,WAAcH,GAIfI,QAAQC,MAAM,yBAA0Bb,EAAeO,IAHvDK,QAAQE,IAAI,+BACZZ,EAAAa,UAAaP,IAIV,E,kBAIf,SAAwBR,EAAeC,GACnC,IAEI,OADAC,EAAAc,cAAiBhB,EAAeK,KAAKY,UAAUhB,KACxC,C,CACT,MAAOM,GAEL,OADAK,QAAQC,MAAM,4BAA6Bb,SAAsBC,EAAmBA,EAAmBM,IAChG,C,KC3BTW,sB,EAAAnB,EAAAoB,eCQN,SAASC,IACL,OAAOC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAAMC,U,QASnDC,EAAiB,C,mBAnBjB,SAA4BC,GACxB,OAAOP,KAAyBO,EAAYC,O,oBAGhD,SAA2B3B,EAAmB4B,GAE1C,cADO5B,EAAkB4B,GAClB5B,C,sBAgBPmB,E,wBATJ,SAAiCU,EAAkBC,GAG/C,OAFUC,OAAOF,GACPE,OAAOD,IACFN,U,IDdbQ,mB,EAAAP,EAAAQ,kB,EAAAR,EAAAS,oB,EAAAT,EAAAU,wBAEN,MAAMC,EAAkB5B,EAAA6B,KAAUC,EAAAC,MAAe,mBAC3CC,EAAkBhC,EAAA6B,KAAUD,EAAiB,eAyDnD,SAASK,EAAOb,GACZ,IAAI5B,EAAoB0C,EAAsBF,GAE9C,OADAxC,EAAoB2C,EAAkB3C,EAAmB4B,GAClDgB,EAAeJ,EAAiBxC,E,CAiE3C6C,OAAAC,QAAiB,C,IApHjB,WACI,OAAOJ,EAAsBF,E,QAYjC,SAAeZ,EAASmB,EAAMC,EArBS,IAsBnC,IAAIhD,EAAoB0C,EAAsBF,GAK9C,OAJAxC,EAAkB4B,GAAW,CACzBD,QAASsB,EAAwBC,IAvBT,IAuBgCF,G,KACxDD,GAEGH,EAAeJ,EAAiBxC,E,OAU3C,SAAc4B,GACV,IAAI5B,EAAoB0C,EAAsBF,GAC9C,GAAIxC,EAAkB4B,GAClB,OAAIuB,EAAmBnD,EAAkB4B,SACrCa,EAAOb,GAGJ5B,EAAkB4B,GAASmB,I,SAoFtCN,E,QA1DJ,SAAiBb,EAASoB,EAtEa,IAuEnC,IAAIhD,EAAoB0C,EAAsBF,GAC9C,QAAIxC,EAAkB4B,KAClB5B,EAAkB4B,GAASD,QAAUsB,EAAwBC,IAxErC,IAwE4DF,GAC7EJ,EAAeJ,EAAiBxC,G,aAY/C,SAAoB4B,GAChB,IAAI5B,EAAoB0C,EAAsBF,GAC9C,QAAIxC,EAAkB4B,KAClB5B,EAAkB4B,GAASD,QAAU,KAC9BiB,EAAeJ,EAAiBxC,G,YAY/C,SAAmB4B,GAEf,OADwBc,EAAsBF,GACrBZ,IAAUD,cAAWxB,C,YAWlD,SAAmByB,EAASwB,GACxB,IAAIpD,EAAoB0C,EAAsBF,GAC9C,QAAIxC,EAAkB4B,KAClB5B,EAAkB4B,GAASD,QAAUyB,EAC9BR,EAAeJ,EAAiBxC,G","sources":["src/file-utils.js","src/index.js","src/cache-utils.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readCacheFileContents(cacheFilePath) {\n    try {\n        const cacheFileContents = fs.readFileSync(cacheFilePath);\n        if (cacheFileContents === undefined) {\n            return {};\n        }\n        return JSON.parse(cacheFileContents);\n    } catch (e) {\n        const cachefileDir = path.dirname(cacheFilePath);\n        if (!fs.existsSync(cachefileDir)) {\n            console.log('Creating cache directory...');\n            fs.mkdirSync(cachefileDir);\n        } else {\n            console.error('[GET_CACHE_FILE_ERROR]', cacheFilePath, e);\n        }\n        return {};\n    }\n}\n\nfunction writeCacheToFS(cacheFilePath, cacheFileContents) {\n    try {\n        fs.writeFileSync(cacheFilePath, JSON.stringify(cacheFileContents));\n        return true;\n    } catch (e) {\n        console.error('[WRITE_CACHE_TO_FS_ERROR]', cacheFilePath, typeof cacheFileContents, cacheFileContents, e);\n        return false;\n    }\n}\n\nmodule.exports = {\n    readCacheFileContents,\n    writeCacheToFS,\n};","'use strict';\n\nconst path = require('path');\nconst { readCacheFileContents, writeCacheToFS } = require('./file-utils');\nconst { cacheRecordIsStale, removeCacheRecord, getCurrentTimeStamp, generateExpiryTimestamp } = require('./cache-utils');\n\nconst CACHE_DIRECTORY = path.join(process.cwd(), '/.satchel-cache');\nconst CACHE_FILE_PATH = path.join(CACHE_DIRECTORY, '/cache.json');\nconst CACHE_DEFAULT_LIFESPAN_MINUTES = 15;\nconst CACHE_LIFESPAN_MODIFIER = 60 * 1000;\n\n/**\n * Retrieves the entire store contents.\n * \n * @returns {object}\n */\nfunction all() {\n    return readCacheFileContents(CACHE_FILE_PATH);\n}\n\n/**\n * Writes a new record to the store.\n * \n * @param {string} cacheID - The key to store record.\n * @param {*} data - The value to be stored.\n * @param {string} lifespan (optional) - The expiry timestamp for the cache store record.\n * \n * @returns {boolean}\n */\nfunction write(cacheID, data, lifespan = CACHE_DEFAULT_LIFESPAN_MINUTES) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    cacheFileContents[cacheID] = {\n        expires: generateExpiryTimestamp(getCurrentTimeStamp(), lifespan * CACHE_LIFESPAN_MODIFIER),\n        data\n    };\n    return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n}\n\n/**\n * Reads a record from the store.\n * \n * @param {string} cacheID - The key of the store record to be read.\n * \n * @returns {object}\n */\nfunction read(cacheID) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    if (cacheFileContents[cacheID]) {\n        if (cacheRecordIsStale(cacheFileContents[cacheID])) {\n            remove(cacheID);\n            return undefined;\n        }\n        return cacheFileContents[cacheID].data;\n    }\n    return undefined;\n}\n\n/**\n * Removes a record from the store. \n * \n * @param {string} cacheID - The key of the store record to be removed.\n * \n * @returns {boolean}\n */\nfunction remove(cacheID) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    cacheFileContents = removeCacheRecord(cacheFileContents, cacheID);\n    return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n}\n\n/**\n * Refreshes the expiry time of a store record to the current timestamp.\n * \n * @param {*} cacheID - The key of the store record to be refreshed.\n * @param {string} lifespan (optional) - The expiry timestamp for the cache store record.\n * \n * @returns {boolean} \n */\nfunction hydrate(cacheID, lifespan = CACHE_DEFAULT_LIFESPAN_MINUTES) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    if (cacheFileContents[cacheID]) {\n        cacheFileContents[cacheID].expires = generateExpiryTimestamp(getCurrentTimeStamp(), lifespan * CACHE_LIFESPAN_MODIFIER);\n        return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n    }\n    return false;\n}\n\n/**\n * Sets a store record to expired, but does not delete it.\n * \n * @param {string} cacheID\n *  \n * @returns {boolean} \n */\nfunction invalidate(cacheID) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    if (cacheFileContents[cacheID]) {\n        cacheFileContents[cacheID].expires = '-1';\n        return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n    }\n    return false;\n}\n\n/**\n * Retrieves the expiry timestome for a given store record.\n * \n * @param {string} cacheID \n * \n * @returns {BigInt} \n */\nfunction getExpiry(cacheID) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    return cacheFileContents[cacheID]?.expires || undefined;\n}\n\n/**\n * Sets the expiry timestamp for a given store record.\n * \n * @param {string} cacheID \n * @param {BigInt} timestamp\n *  \n * @returns {boolean}\n */\nfunction setExpiry(cacheID, timestamp) {\n    let cacheFileContents = readCacheFileContents(CACHE_FILE_PATH);\n    if (cacheFileContents[cacheID]) {\n        cacheFileContents[cacheID].expires = timestamp;\n        return writeCacheToFS(CACHE_FILE_PATH, cacheFileContents);\n    }\n    return false;\n}\n\nmodule.exports = {\n    all,\n    write,\n    read,\n    remove,\n    hydrate,\n    invalidate,\n    getExpiry,\n    setExpiry,\n};","'use strict';\n\nfunction cacheRecordIsStale(cacheRecord) {\n    return getCurrentTimeStamp() >= cacheRecord.expires;\n}\n\nfunction removeCacheRecord(cacheFileContents, cacheID) {\n    delete cacheFileContents[cacheID];\n    return cacheFileContents;\n}\n\nfunction getCurrentTimeStamp() {\n    return Math.floor(new Date().getTime() / 1000).toString();\n}\n\nfunction generateExpiryTimestamp(currentTimestamp, cacheLifespan) {\n    const t = BigInt(currentTimestamp);\n    const l = BigInt(cacheLifespan);\n    return (t + l).toString();\n}\n\nmodule.exports = {\n    cacheRecordIsStale,\n    removeCacheRecord,\n    getCurrentTimeStamp,\n    generateExpiryTimestamp,\n};"],"names":["$9a3c0a0aacdbb541$exports","cacheFilePath","cacheFileContents","$6YMy9$fs","readFileSync","undefined","JSON","parse","e","cachefileDir","$6YMy9$path","dirname","existsSync","console","error","log","mkdirSync","writeFileSync","stringify","readCacheFileContents","writeCacheToFS","$f88b8f9a492c3c7f$var$getCurrentTimeStamp","Math","floor","Date","getTime","toString","$f88b8f9a492c3c7f$exports","cacheRecord","expires","cacheID","currentTimestamp","cacheLifespan","BigInt","cacheRecordIsStale","removeCacheRecord","getCurrentTimeStamp","generateExpiryTimestamp","$6dbc217b010a975b$var$CACHE_DIRECTORY","join","$6YMy9$process","cwd","$6dbc217b010a975b$var$CACHE_FILE_PATH","$6dbc217b010a975b$var$remove","$6dbc217b010a975b$require$readCacheFileContents","$6dbc217b010a975b$require$removeCacheRecord","$6dbc217b010a975b$require$writeCacheToFS","module","exports","data","lifespan","$6dbc217b010a975b$require$generateExpiryTimestamp","$6dbc217b010a975b$require$getCurrentTimeStamp","$6dbc217b010a975b$require$cacheRecordIsStale","timestamp"],"version":3,"file":"index.js.map"}